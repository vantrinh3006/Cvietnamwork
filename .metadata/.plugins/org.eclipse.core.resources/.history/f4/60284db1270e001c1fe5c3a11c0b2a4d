package model.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

import model.bean.Category;
import model.bean.News;
import util.DBConnectionUtil;
import util.DefineUtil;

public class NewsDAO {
	private Connection conn;
	private ResultSet rs;
	private PreparedStatement pst;
	private Statement st;
	
	public int numberOfItems() {
		int number = 0;
		conn = DBConnectionUtil.getConnection();
		String query = "SELECT COUNT(*) AS count FROM news";
		try {
			pst = conn.prepareStatement(query);
			rs = pst.executeQuery();
			if(rs.next()) {
				number = rs.getInt("count");
				return number;
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return number;
	}

	public ArrayList<News> getItemsPagination(int offset) {
		ArrayList<News> items = new ArrayList<News>();
		conn = DBConnectionUtil.getConnection();
		String query = "SELECT news.id, title, date, corporatename, adress, jobrequest, jd, salary,email , cat_id , categories.name "
				+ "FROM news INNER JOIN categories ON cat_id = categories.id ORDER BY news.id DESC LIMIT ?,?";
		try {
			pst=conn.prepareStatement(query);
			pst.setInt(1, offset);
			pst.setInt(2, DefineUtil.NUMBER_PER_PAGE);
			rs = pst.executeQuery();
			while(rs.next()) {
				int id = rs.getInt(1);
				String title = rs.getString(2);
				String date = rs.getString(3);
				String corporatename = rs.getString(4);
				String adress = rs.getString(5);
				String jobrequest = rs.getString(6);
				String jd = rs.getString(7);
				int salary = rs.getInt(8);
				String email = rs.getString(9);
				Category category = new Category(rs.getInt(10), rs.getString(11));
				News item = new News(id, title, date, corporatename, adress, jobrequest, jd, salary, email, category);
				items.add(item);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			if(rs !=  null && pst != null && st  != null) {
				try {
					rs.close();
					pst.close();
					st.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
				
			}
		}
		return items;
	}

	public News getItem(int id) {
		News item = null ;
		conn = DBConnectionUtil.getConnection();
		String query = "SELECT news.id, title, date, corporatename, adress, jobrequest, jd, salary,email , cat_id , categories.name "
				+ "FROM news INNER JOIN categories ON cat_id = categories.id WHERE news.id = ? ";
		try {
			pst = conn.prepareStatement(query);
			pst.setInt(1, id);
			rs = pst.executeQuery();
			if(rs.next()) {
				String title = rs.getString(2);
				String date = rs.getString(3);
				String corporatename = rs.getString(4);
				String adress = rs.getString(5);
				String jobrequest = rs.getString(6);
				String jd = rs.getString(7);
				int salary = rs.getInt(8);
				String email = rs.getString(9);
				Category category = new Category(rs.getInt(10), rs.getString(11));
				
				item = new News(id, title, date, corporatename, adress, jobrequest, jd, salary, email, category);
				}
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			if(pst != null && st != null && rs != null) {
				try {
					pst.close();
					st.close();
					rs.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
		return item;
	}

	public int delItem(int id) {
		int result = 0;
		conn = DBConnectionUtil.getConnection();
		String query = "DELETE FROM news WHERE id = ?";
		try {
			pst = conn.prepareStatement(query);
			pst.setInt(1, id);
			result = pst.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return result;
	}

	public int editItem(News item) {
		int result = 0;
		conn = DBConnectionUtil.getConnection();  
		String query = "UPDATE news SET title=?, corporatename=?, adress=?, jobrequest=?,jd =?,salary =?,email =?,cat_id =? WHERE id = ?";
		try {
			pst = conn.prepareStatement(query);

			pst.setString(1, item.getTitle());
			pst.setString(2, item.getCorporatename());
			pst.setString(3, item.getAdress());
			pst.setString(4, item.getJobrequest());
			pst.setString(5, item.getJd());
			pst.setInt(6, item.getSalary());
			pst.setString(7, item.getEmail());
			pst.setInt(8, item.getCategory().getId());
			pst.setInt(9, item.getId());
			result = pst.executeUpdate();	 
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (pst != null && conn != null) {
				try {
					pst.close();
					conn.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}

		return result;
	}

	public int addItem(News item) {
		int result = 0;
		conn = DBConnectionUtil.getConnection();
		String query = "INSERT INTO news(title, date, corporatename, adress, jobrequest, jd, salary, email, cat_id) VALUE(?,?,?,?,?,?,?,?,?)";
		try {
			pst = conn.prepareStatement(query);

			pst.setString(1, item.getTitle());
			pst.setString(2, item.getDate());
			pst.setString(3, item.getCorporatename());
			pst.setString(4, item.getAdress());
			pst.setString(5, item.getJobrequest());
			pst.setString(6, item.getJd());
			pst.setInt(7, item.getSalary());
			pst.setString(8, item.getEmail());
			pst.setInt(9, item.getCategory().getId());

			result = pst.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			if (rs != null && pst != null && conn != null) {
				try {
					rs.close();
					pst.close();
					conn.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		return result;
	}

	public ArrayList<News> getItemsTop(int i) {
		ArrayList<News> items = new ArrayList<News>();
		conn = DBConnectionUtil.getConnection();
		String query = "SELECT news.id, title, date, corporatename, adress, jobrequest, jd, salary,email , cat_id , categories.name "
				+ "FROM news INNER JOIN categories ON cat_id = categories.id  ORDER BY news.id DESC LIMIT ?";
		try {
			pst=conn.prepareStatement(query);
			pst.setInt(1, i);
			rs = pst.executeQuery();
			while(rs.next()) {
				int id = rs.getInt(1);
				String title = rs.getString(2);
				String date = rs.getString(3);
				String corporatename = rs.getString(4);
				String adress = rs.getString(5);
				String jobrequest = rs.getString(6);
				String jd = rs.getString(7);
				int salary = rs.getInt(8);
				String email = rs.getString(9);
				Category category = new Category(rs.getInt(10), rs.getString(11));
				News item = new News(id, title, date, corporatename, adress, jobrequest, jd, salary, email, category);
				items.add(item);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			if(rs !=  null && pst != null && st  != null) {
				try {
					rs.close();
					pst.close();
					st.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
				
			}
		}
		return items;
	}

	public int numberOfItems(int cat_id) {
		int number = 0;
		conn = DBConnectionUtil.getConnection();
		String query = "SELECT COUNT(*) AS count FROM news WHERE cat_id=?";
		try {
			pst = conn.prepareStatement(query);
			pst.setInt(1, cat_id);
			rs = pst.executeQuery();
			if(rs.next()) {
				number = rs.getInt("count");
				return number;
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return number;
	}

	public ArrayList<News> getItemsByCategoryPagination(int offset, int cat_id) {
		ArrayList<News> items = new ArrayList<News>();
		conn = DBConnectionUtil.getConnection();
		String query = "SELECT news.id, title, date, corporatename, adress, jobrequest, jd, salary,email , cat_id , categories.name "
				+ "FROM news INNER JOIN categories ON cat_id = categories.id WHERE cat_id = ? ORDER BY news.id ASC LIMIT ?,?";
		try {
			pst=conn.prepareStatement(query);
			pst.setInt(1, cat_id);
			pst.setInt(2, offset);
			pst.setInt(3, DefineUtil.NUMBER_PER_PAGE);
			rs = pst.executeQuery();
			while(rs.next()) {
				int id = rs.getInt(1);
				String title = rs.getString(2);
				String date = rs.getString(3);
				String corporatename = rs.getString(4);
				String adress = rs.getString(5);
				String jobrequest = rs.getString(6);
				String jd = rs.getString(7);
				int salary = rs.getInt(8);
				String email = rs.getString(9);
				Category category = new Category(rs.getInt(10), rs.getString(11));
				News item = new News(id, title, date, corporatename, adress, jobrequest, jd, salary, email, category);
				items.add(item);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			if(rs !=  null && pst != null && st  != null) {
				try {
					rs.close();
					pst.close();
					st.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		return items;
	}

	public int numberOfItems(String searchtitle, String searchadress) {
		int number = 0;
		conn = DBConnectionUtil.getConnection();
		String query = "SELECT COUNT(*) AS count FROM news WHERE title LIKE ? AND adress LIKE ?";
		try {
			pst = conn.prepareStatement(query);
			pst.setString(1, "%" + searchtitle + "%");
			pst.setString(2, "%" + searchadress + "%");
			rs = pst.executeQuery();
			if(rs.next()) {
				number = rs.getInt("count");
				return number;
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return number;
	}

	public ArrayList<News> getItemsPagination(int offset, String searchtitle, String searchadress) {
		ArrayList<News> items = new ArrayList<News>();
		conn = DBConnectionUtil.getConnection();
		String query = "SELECT news.id, title, date, corporatename, adress, jobrequest, jd, salary,email , cat_id , categories.name "
				+ "FROM news INNER JOIN categories ON cat_id = categories.id WHERE title LIKE ? AND adress LIKE ? ORDER BY news.id DESC LIMIT ?,?";
		try {
			pst=conn.prepareStatement(query);
			pst.setString(1, "%" + searchtitle + "%");
			pst.setString(2, "%" + searchadress + "%");
			pst.setInt(3, offset);
			pst.setInt(4, DefineUtil.NUMBER_PER_PAGE);
			rs = pst.executeQuery();
			while(rs.next()) {
				int id = rs.getInt(1);
				String title = rs.getString(2);
				String date = rs.getString(3);
				String corporatename = rs.getString(4);
				String adress = rs.getString(5);
				String jobrequest = rs.getString(6);
				String jd = rs.getString(7);
				int salary = rs.getInt(8);
				String email = rs.getString(9);
				Category category = new Category(rs.getInt(10), rs.getString(11));
				News item = new News(id, title, date, corporatename, adress, jobrequest, jd, salary, email, category);
				items.add(item);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			if(rs !=  null && pst != null && st  != null) {
				try {
					rs.close();
					pst.close();
					st.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		return items;
	}

	public ArrayList<News> getItemsPagination(int offset, String keyWord) {
		ArrayList<News> items = new ArrayList<News>();
		conn = DBConnectionUtil.getConnection();
		String query = "SELECT news.id, title, date, corporatename, adress, jobrequest, jd, salary,email , cat_id , categories.name "
				+ "FROM news INNER JOIN categories ON cat_id = categories.id WHERE title LIKE ? ORDER BY news.id DESC LIMIT ?,?";
		try {
			pst=conn.prepareStatement(query);
			pst.setString(1, "%" + keyWord + "%");
			pst.setInt(2, offset);
			pst.setInt(3, DefineUtil.NUMBER_PER_PAGE);
			rs = pst.executeQuery();
			while(rs.next()) {
				int id = rs.getInt(1);
				String title = rs.getString(2);
				String date = rs.getString(3);
				String corporatename = rs.getString(4);
				String adress = rs.getString(5);
				String jobrequest = rs.getString(6);
				String jd = rs.getString(7);
				int salary = rs.getInt(8);
				String email = rs.getString(9);
				Category category = new Category(rs.getInt(10), rs.getString(11));
				News item = new News(id, title, date, corporatename, adress, jobrequest, jd, salary, email, category);
				items.add(item);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			if(rs !=  null && pst != null && st  != null) {
				try {
					rs.close();
					pst.close();
					st.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
				
			}
		}
		return items;

	}

	public int numberOfItems(String keyWord) {
		int number = 0;
		conn = DBConnectionUtil.getConnection();
		String query = "SELECT COUNT(*) AS count FROM news WHERE title LIKE ?";
		try {
			pst = conn.prepareStatement(query);
			pst.setString(1, "%" + keyWord + "%");
			rs = pst.executeQuery();
			if(rs.next()) {
				number = rs.getInt("count");
				return number;
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return number;
	}

	public ArrayList<News> getItemsCommentedByUserIdPagination(int offset, int user_id) {
		ArrayList<News> items = new ArrayList<News>();
		conn = DBConnectionUtil.getConnection();
		String query = "SELECT news.id, title, date, corporatename, adress, jobrequest, jd, salary,email , cat_id "
				+ "FROM news INNER JOIN comment ON news.id = comments.news_id WHERE ORDER BY news.id DESC LIMIT ?,?";
		try {
			pst=conn.prepareStatement(query);
			pst.setInt(1, offset);
			pst.setInt(2, DefineUtil.NUMBER_PER_PAGE);
			rs = pst.executeQuery();
			while(rs.next()) {
				int id = rs.getInt(1);
				String title = rs.getString(2);
				String date = rs.getString(3);
				String corporatename = rs.getString(4);
				String adress = rs.getString(5);
				String jobrequest = rs.getString(6);
				String jd = rs.getString(7);
				int salary = rs.getInt(8);
				String email = rs.getString(9);
				Category category = new Category(rs.getInt(10), null);
				News item = new News(id, title, date, corporatename, adress, jobrequest, jd, salary, email, category);
				items.add(item);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			if(rs !=  null && pst != null && st  != null) {
				try {
					rs.close();
					pst.close();
					st.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		return items;
	}


}
